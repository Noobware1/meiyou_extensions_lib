import 'dart:async';

import 'package:meiyou_extensions_lib/network.dart';
import 'package:meiyou_extensions_lib/src/lib_overrides.dart';
import 'package:meiyou_extensions_lib/src/models/filter_list.dart';
import 'package:meiyou_extensions_lib/src/models/home_page.dart';
import 'package:meiyou_extensions_lib/src/models/media.dart';
import 'package:meiyou_extensions_lib/src/models/media_asset.dart';
import 'package:meiyou_extensions_lib/src/models/media_content.dart';
import 'package:meiyou_extensions_lib/src/models/media_link.dart';
import 'package:meiyou_extensions_lib/src/models/search_page.dart';
import 'package:meiyou_extensions_lib/src/models/source/catalogue_source.dart';
import 'package:meiyou_extensions_lib/src/models/unsupported_operation_exception.dart';
import 'package:meiyou_extensions_lib/src/utils/utils.dart';
import 'package:meta/meta.dart';
import 'package:okhttp/okhttp.dart';
import 'package:okhttp/request.dart';
import 'package:okhttp/response.dart';

abstract class HttpSource extends CatalogueSource {
  HttpSource();

  /// Network service.
  @protected
  final NetworkHelper network = ExtensionlibOverrides.networkHelper;

  /// Base url of the website without the trailing slash, like: http://mysite.com
  abstract final String baseUrl;

  final int versionId = 1;

  // /// ID of the source. By default it uses a generated id using the first 16 characters (64 bits)
  // /// of the MD5 of the string `"${name.lowercase()}/$lang/$versionId"`.
  // ///
  // /// The ID is generated by the [generateId] function, which can be reused if needed
  // /// to generate outdated IDs for cases where the source name or language needs to
  // /// be changed but migrations can be avoided.
  // ///
  // /// Note: the generated ID sets the sign bit to `0`.
  @override
  late final int id = generateId(name, lang, versionId);

  /// Headers used for requests.
  late final Headers headers = headersBuilder().build();

  OkHttpClient get client => network.client;

  /// Headers builder for requests. Implementations can override this method for custom headers.
  HeadersBuilder headersBuilder() =>
      Headers.Builder().add('User-Agent', network.defaultUserAgentProvider);

  List<HomePageRequest> getHomePageRequestList();

  Future<HomePage> getHomePage(int page, HomePageRequest request) {
    return client
        .newCall(homePageRequest(page, request))
        .execute()
        .then((response) => homePageParse(request, response));
  }

  Request homePageRequest(int page, HomePageRequest request) {
    return GET(baseUrl + request.url, headers: headers);
  }

  FutureOr<HomePage> homePageParse(HomePageRequest request, Response response);

  @override
  Future<IMedia> getMediaDetails(IMedia media) {
    return client
        .newCall(mediaDetailsRequest(media))
        .execute()
        .then(mediaDetailsParse);
  }

  Request mediaDetailsRequest(IMedia media) {
    return GET(baseUrl + media.url, headers: headers);
  }

  FutureOr<IMedia> mediaDetailsParse(Response response);

  @override
  Future<List<IMediaContent>> getMediaContentList(IMedia media) {
    return client
        .newCall(mediaContentListRequest(media))
        .execute()
        .then(mediaContentListParse);
  }

  Request mediaContentListRequest(IMedia media) {
    return GET(baseUrl + media.url, headers: headers);
  }

  FutureOr<List<IMediaContent>> mediaContentListParse(Response response);

  @override
  Future<List<MediaLink>> getMediaLinkList(IMediaContent content) {
    return client
        .newCall(mediaLinkListRequest(content))
        .execute()
        .then(mediaLinkListParse);
  }

  Request mediaLinkListRequest(IMediaContent content) {
    return GET(baseUrl + content.url, headers: headers);
  }

  FutureOr<List<MediaLink>> mediaLinkListParse(Response response);
  @override
  Future<MediaAsset> getMediaAsset(MediaLink link) {
    return client.newCall(mediaAssetRequest(link)).execute().then(
          (response) => mediaAssetParse(link, response),
        );
  }

  Request mediaAssetRequest(MediaLink link) {
    return GET(link.url, headers: link.headers);
  }

  FutureOr<MediaAsset> mediaAssetParse(MediaLink link, Response response);

  @override
  Future<SearchPage> getSearchPage(int page, String query, FilterList filters) {
    return client
        .newCall(searchPageRequest(page, query, filters))
        .execute()
        .then(searchPageParse);
  }

  Request searchPageRequest(int page, String query, FilterList filters);

  FutureOr<SearchPage> searchPageParse(Response response);
}
